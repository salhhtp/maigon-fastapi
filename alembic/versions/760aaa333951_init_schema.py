"""init schema

Revision ID: 760aaa333951
Revises: 
Create Date: 2025-08-19 22:15:14.919540

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '760aaa333951'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('requests_service_id_idx', table_name='requests')
    op.drop_index('requests_user_id_created_at_idx', table_name='requests')
    op.drop_table('requests')
    op.drop_table('billing_events')
    op.drop_table('services')
    op.drop_index('subscriptions_last_event_id_idx', table_name='subscriptions')
    op.drop_table('subscriptions')
    op.drop_table('plans')
    op.drop_table('profiles')
    op.drop_table('request_limits')
    op.drop_table('companies')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('companies',
    sa.Column('id', postgresql.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('domain', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='companies_pkey'),
    sa.UniqueConstraint('domain', name='companies_domain_key')
    )
    op.create_table('request_limits',
    sa.Column('user_id', postgresql.UUID(), autoincrement=False, nullable=False),
    sa.Column('tokens', sa.INTEGER(), server_default=sa.text('60'), autoincrement=False, nullable=True),
    sa.Column('last_refill', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('user_id', name='request_limits_pkey')
    )
    op.create_table('profiles',
    sa.Column('id', postgresql.UUID(), autoincrement=False, nullable=False),
    sa.Column('full_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('avatar_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text("timezone('utc'::text, now())"), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['id'], ['auth.users.id'], name='profiles_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='profiles_pkey')
    )
    op.create_table('plans',
    sa.Column('id', postgresql.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('code', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('price_cents', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('currency', sa.TEXT(), server_default=sa.text("'EUR'::text"), autoincrement=False, nullable=True),
    sa.Column('monthly_quota', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('trial_days', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='plans_pkey'),
    sa.UniqueConstraint('code', name='plans_code_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('subscriptions',
    sa.Column('id', postgresql.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id', postgresql.UUID(), autoincrement=False, nullable=True),
    sa.Column('plan_id', postgresql.UUID(), autoincrement=False, nullable=True),
    sa.Column('company_id', postgresql.UUID(), autoincrement=False, nullable=True),
    sa.Column('current_period_start', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('current_period_end', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('usage_this_period', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('status', sa.TEXT(), server_default=sa.text("'trialing'::text"), autoincrement=False, nullable=True),
    sa.Column('last_event_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['plan_id'], ['plans.id'], name='subscriptions_plan_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['auth.users.id'], name='subscriptions_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='subscriptions_pkey')
    )
    op.create_index('subscriptions_last_event_id_idx', 'subscriptions', ['last_event_id'], unique=False)
    op.create_table('services',
    sa.Column('id', postgresql.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('code', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('slug', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('api_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='services_pkey'),
    sa.UniqueConstraint('code', name='services_code_key'),
    sa.UniqueConstraint('slug', name='services_slug_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('billing_events',
    sa.Column('id', postgresql.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id', postgresql.UUID(), autoincrement=False, nullable=True),
    sa.Column('event_type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('amount_cents', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('raw', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['auth.users.id'], name='billing_events_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='billing_events_pkey')
    )
    op.create_table('requests',
    sa.Column('id', postgresql.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id', postgresql.UUID(), autoincrement=False, nullable=True),
    sa.Column('service_id', postgresql.UUID(), autoincrement=False, nullable=True),
    sa.Column('subscription_id', postgresql.UUID(), autoincrement=False, nullable=True),
    sa.Column('company_id', postgresql.UUID(), autoincrement=False, nullable=True),
    sa.Column('file_path', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.TEXT(), server_default=sa.text("'queued'::text"), autoincrement=False, nullable=True),
    sa.Column('result_json', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('ttl_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.CheckConstraint("status = ANY (ARRAY['queued'::text, 'running'::text, 'done'::text, 'error'::text])", name='status_check'),
    sa.ForeignKeyConstraint(['service_id'], ['services.id'], name='requests_service_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['auth.users.id'], name='requests_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='requests_pkey')
    )
    op.create_index('requests_user_id_created_at_idx', 'requests', ['user_id', sa.text('created_at DESC')], unique=False)
    op.create_index('requests_service_id_idx', 'requests', ['service_id'], unique=False)
    # ### end Alembic commands ###
